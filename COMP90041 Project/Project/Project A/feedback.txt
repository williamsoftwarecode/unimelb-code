============================================
vis/result.rtx
16:29:23_Friday_25_March_2016
============================================
Feedback:
	Your program ("TicTacToe.java") has been submitted successfully.

	Compiling your program with "javac"...

	Your program has been run successfully :-)

	Now, it's your responsibility to test your program for correctness!
	Here is a simple test case, and the results:

============================================
Test for input file: in1
Expected results:				Your results:
Welcome to Tic Tac Toe!				Welcome to Tic Tac Toe!

Enter Player O's name:				Enter Player O's name:
Enter Player X's name:				Enter Player X's name:
 | | 						 | | 
-----						-----
 | | 						 | | 
-----						-----
 | | 						 | | 
Rose's move:					Rose's move:
 | | 						 | | 
-----						-----
 |O| 						 |O| 
-----						-----
 | | 						 | | 
Jack's move:					Jack's move:
 | | 						 | | 
-----						-----
 |O| 						 |O| 
-----						-----
 | |X						 | |X
Rose's move:					Rose's move:
 | | 						 | | 
-----						-----
 |O|O						 |O|O
-----						-----
 | |X						 | |X
Jack's move:					Jack's move:
 | | 						 | | 
-----						-----
 |O|O						 |O|O
-----						-----
 |X|X						 |X|X
Rose's move:					Rose's move:
 | | 						 | | 
-----						-----
O|O|O						O|O|O
-----						-----
 |X|X						 |X|X
Game over. Rose won!				Game over. Rose won!

Your results seem to be CORRECT :-).

============================================
src/TicTacToe.java
16:29:22_Friday_25_March_2016
============================================
import java.util.Scanner; 

public class TicTacToe {
	
	Scanner keyboard = new Scanner(System.in);
	final int OWON = 1; 
	final int XWON = 2; 
	final int DRAW = 3; 
	final int CONT = 4;
	final char E = ' ';

	public static void main(String[] args) {
		TicTacToe game = new TicTacToe();
		game.run();
	}
	
	public void run () {

		int state = CONT;

		System.out.println("Welcome to Tic Tac Toe!\n");
		System.out.println("Enter Player O's name:"); 
		String playerO = keyboard.next(); 
		System.out.println("Enter Player X's name:"); 
		String playerX = keyboard.next(); 
		keyboard.nextLine(); // remove \n for next nextLine()
		
		// Initialise grid
		final char E = ' ';
		char[][] gridValues = { {E, E, E}, {E, E, E}, {E, E, E} };
		printGrid(gridValues);
		
		int turn = 2;		
		while (state == CONT) {
			
			if (turn%2 == 0) {
				System.out.println(playerO + "'s move:"); 
				String oMove = keyboard.nextLine(); 
				updateGrid(gridValues, oMove, 'O');
				printGrid(gridValues);
				state = getGameState(gridValues);
			} else { 
				System.out.println(playerX + "'s move:"); 
				String xMove = keyboard.nextLine(); 
				updateGrid(gridValues, xMove, 'X');
				printGrid(gridValues);
				state = getGameState(gridValues);
			}
			turn++;
		}

		if (state == OWON) { 
			System.out.println("Game over. " + playerO + " won!"); 
		} else if (state == XWON) {
			System.out.println("Game over. " + playerX + " won!"); 
		} else if (state == DRAW) { 
			System.out.println("Game over. It was a draw!"); 
		}
	}
	
	public void printGrid (char[][] grid) { 
		System.out.println(grid[0][0] + "|" + grid[0][1] + "|" + grid[0][2]);
		System.out.println("-----"); 
		System.out.println(grid[1][0] + "|" + grid[1][1] + "|" + grid[1][2]); 
		System.out.println("-----"); 
		System.out.println(grid[2][0] + "|" + grid[2][1] + "|" + grid[2][2]);
	}
	
	public void updateGrid (char[][] grid, String moveNew, char type) { 
		final int ROW = 0;
		final int COLUMN = 1;
		
		String[] parts = moveNew.split(" ");
		int moveRow = Integer.parseInt(parts[ROW]);
		int moveColumn = Integer.parseInt(parts[COLUMN]);		
		
		if (type == 'O') {
			grid[moveRow][moveColumn] = 'O';
		}
		
		if (type == 'X') {
			grid[moveRow][moveColumn] = 'X';
		}
	}
	
	public int getGameState (char[][] grid) { 
		int gameState = CONT;
		int numberFullSquares = 0;
		
		for (int i = 0; i < 3; i++) {
			// Check rows for win
			if (checkAllEqual(grid[i][0], grid[i][1], grid[i][2])) {
				gameState = checkWinner(grid[i][0]);	
			}				
			// Check columns for win
			if (checkAllEqual(grid[0][i], grid[1][i], grid[2][i])) {
				gameState = checkWinner(grid[0][i]);
			}
		}
			
		// Check Diagonals
		if (checkAllEqual(grid[0][0], grid[1][1], grid[2][2])) { 
			gameState = checkWinner(grid[0][0]); 
		}
			
		if (checkAllEqual(grid[2][0], grid[1][1], grid[0][2])) {
			gameState = checkWinner(grid[2][0]);
		}
			
		// Check Draw 
		for (int j = 0; j < 3; j++) {
			for (int k = 0; k < 3; k++) { 
				if (grid[j][k] != E) {
					numberFullSquares++; 
				}
			}
		}
		
		if (numberFullSquares == 9) { 
			gameState = DRAW;
		}
	return gameState; 
	} 
	
	public Boolean checkAllEqual (char First, char Second, char Third) {
		boolean equal = false; 
		
		// Dismiss equal empty squares
		if ((First == E) || (Second == E) || (Third == E)) { 
			equal = true;
		}
		
		// Check for three equal squares
		if (First == Second) {
			if (Second == Third) {
				equal = true; 
			} else {
				equal = false;
			}
		} else { 
			equal = false; 
		}
		
		return equal;
	}
	
	public int checkWinner (char player) {		
		int winState = CONT; 
		
		if (player == 'O') { 
			winState = OWON;
		}
		
		if (player == 'X') { 
			winState = XWON;
		}
		
	return winState;
	} 
}